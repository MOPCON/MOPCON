{"version":3,"file":"static/js/580.73540634.chunk.js","mappings":"2NACA,EAAkC,qCAAlC,EAAiF,6BAAjF,EAAqH,0BAArH,EAA+J,mCAA/J,EAAyM,0BAAzM,EAA+O,+BAA/O,EAAoR,yB,SC+BpR,EA9BoB,SAACA,GACnB,IAAQC,EAAgCD,EAAhCC,eAAgBC,EAAgBF,EAAhBE,YAExB,OACEC,EAAAA,EAAAA,KAAA,WAASC,UAAWC,EAA2BC,SAC5CL,EAAeM,KAAI,SAACC,GAAO,OAC1BC,EAAAA,EAAAA,MAAA,OACEL,UAAS,GAAAM,OAAKL,EAAY,KAAAK,OACP,uBAAjBF,EAAQG,KAAiBN,EAAkB,IAG7CO,QAAS,kBAAMV,EAAYM,EAAQ,EAACF,SAAA,EAEpCH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAyBC,UACvCH,EAAAA,EAAAA,KAAA,OACEU,IAAG,GAAAH,OAAKI,SAAsBJ,OAAGF,EAAQO,KACzCC,IAAKR,EAAQG,UAGjBF,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEH,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAaC,SAAEE,EAAQG,QACrCR,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAqBC,SAAEE,EAAQS,YAC7Cd,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAYC,SAAEE,EAAQU,QAAQC,KAAK,YAZ9CX,EAAQG,KAcT,KAId,E,u4BCuCA,EA3DoB,WAClB,IAAAS,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA8CT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAArDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAcpCG,EAAyBjC,EAAekC,QAAO,SAAC3B,GACpD,OAA2B,IAAvBgB,EAAYY,OAEPnC,EAEAuB,EAAYa,MAAK,SAACC,GAAG,OAAK9B,EAAQU,QAAQqB,SAASD,EAAI,GAElE,IAcA,OACE7B,EAAAA,EAAAA,MAAC+B,EAAAA,SAAQ,CAAAlC,SAAA,EACPH,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAACC,MAAM,2BAAOC,KAAK,YACvBf,IACCzB,EAAAA,EAAAA,KAACyC,EAAAA,EAAY,CAACpC,QAASwB,EAAiBa,QATtB,WACtBhB,GAAa,GACbiB,SAASC,KAAKC,MAAMC,SAAW,MACjC,KAQI9C,EAAAA,EAAAA,KAAC+C,EAAAA,GAAIC,EAAAA,EAAAA,GAAA,GAAKC,KACVjD,EAAAA,EAAAA,KAAA,MAAAG,SAAI,8BACJH,EAAAA,EAAAA,KAACkD,EAAAA,EAAM,CACLC,IAAKC,EACL/B,YAAaA,EACbgC,WA3CiB,SAACF,GAClB9B,EAAYe,SAASe,EAAIG,MAC3BhC,GAAe,SAACiC,GAAY,OAC1BA,EAAavB,QAAO,SAACwB,GAAC,OAAKA,IAAML,EAAIG,IAAI,GAAC,IAG5ChC,GAAe,SAACiC,GAAY,SAAAhD,QAAAkD,EAAAA,EAAAA,GAASF,GAAY,CAAEJ,EAAIG,MAAO,GAElE,KAqCItD,EAAAA,EAAAA,KAAC0D,EAAW,CACV5D,eAAgBiC,EAChBhC,YA1BkB,SAACM,GACvByB,EAAmBzB,GACnBqB,GAAa,GACbiB,SAASC,KAAKC,MAAMC,SAAW,QACjC,MA0BF,C","sources":["webpack://mopcon/./src/page/SpeakerPage/SpeakerCard.module.css?3006","page/SpeakerPage/SpeakerCard.js","page/SpeakerPage/SpeakerPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"speak-container\":\"SpeakerCard_speak-container__B6wfQ\",\"keynote\":\"SpeakerCard_keynote__bAWt5\",\"card\":\"SpeakerCard_card__Pps9o\",\"img-container\":\"SpeakerCard_img-container__huLJB\",\"name\":\"SpeakerCard_name__WQQHg\",\"job-title\":\"SpeakerCard_job-title__u0Gv+\",\"tab\":\"SpeakerCard_tab__A7URj\"};","import classes from \"./SpeakerCard.module.css\";\n\nconst SpeakerCard = (props) => {\n  const { SpeakerContent, onOpenModal } = props;\n\n  return (\n    <section className={classes[\"speak-container\"]}>\n      {SpeakerContent.map((speaker) => (\n        <div\n          className={`${classes.card} ${\n            speaker.name === \"鄭鎧尹\" ? classes.keynote : \"\"\n          }`}\n          key={speaker.name}\n          onClick={() => onOpenModal(speaker)}\n        >\n          <div className={classes[\"img-container\"]}>\n            <img\n              src={`${process.env.PUBLIC_URL}${speaker.Img}`}\n              alt={speaker.name}\n            />\n          </div>\n          <div>\n            <p className={classes.name}>{speaker.name}</p>\n            <p className={classes[\"job-title\"]}>{speaker.jobTitle}</p>\n            <p className={classes.tab}>{speaker.hashTag.join(\" \")}</p>\n          </div>\n        </div>\n      ))}\n    </section>\n  );\n};\n\nexport default SpeakerCard;\n","import React, { Fragment, useState } from \"react\";\nimport Head from \"../../helper/Helmet\";\nimport Hero from \"../../components/Layout/Hero\";\nimport TabBtn from \"../../components/Tab/TabBtn\";\nimport SpeakerCard from \"./SpeakerCard\";\nimport SpeakerModal from \"./Modal/SpeakerModal\";\nimport speakerHeroContent from \"../../data/HeroContent/speakerHeroData\";\nimport ScheduleTab from \"../../data/ScheduleTab\";\nimport SpeakerContent from \"../../data/Speaker/SpeakerContent.json\";\n\nconst SpeakerPage = () => {\n  const [selectedTab, setSelectedTab] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n  const [selectedSpeaker, setSelectedSpeaker] = useState(null);\n\n  // 選取tab\n  const handleTabClick = (tab) => {\n    if (selectedTab.includes(tab.type)) {\n      setSelectedTab((prevSelected) =>\n        prevSelected.filter((s) => s !== tab.type)\n      );\n    } else {\n      setSelectedTab((prevSelected) => [...prevSelected, tab.type]);\n    }\n  };\n\n  // 點擊tab時篩選出對應hashTag的資料\n  const filteredSpeakerContent = SpeakerContent.filter((speaker) => {\n    if (selectedTab.length === 0) {\n      // 如果沒選tab則傳入所有資料\n      return SpeakerContent;\n    } else {\n      return selectedTab.some((tag) => speaker.hashTag.includes(tag));\n    }\n  });\n\n  // 打開 modal 時取消背景滾動，取得對應的speaker資料\n  const showModalHandle = (speaker) => {\n    setSelectedSpeaker(speaker);\n    setOpenModal(true);\n    document.body.style.overflow = \"hidden\";\n  };\n\n  const hideModalHandle = () => {\n    setOpenModal(false);\n    document.body.style.overflow = \"auto\";\n  };\n\n  return (\n    <Fragment>\n      <Head title=\"講者陣容\" page=\"speaker\"></Head>\n      {openModal && (\n        <SpeakerModal speaker={selectedSpeaker} onClose={hideModalHandle} />\n      )}\n      <Hero {...speakerHeroContent} />\n      <h2>講者陣容</h2>\n      <TabBtn\n        tab={ScheduleTab}\n        selectedTab={selectedTab}\n        onTabClick={handleTabClick}\n      />\n      <SpeakerCard\n        SpeakerContent={filteredSpeakerContent}\n        onOpenModal={showModalHandle}\n      />\n    </Fragment>\n  );\n};\n\nexport default SpeakerPage;\n"],"names":["props","SpeakerContent","onOpenModal","_jsx","className","classes","children","map","speaker","_jsxs","concat","name","onClick","src","process","Img","alt","jobTitle","hashTag","join","_useState","useState","_useState2","_slicedToArray","selectedTab","setSelectedTab","_useState3","_useState4","openModal","setOpenModal","_useState5","_useState6","selectedSpeaker","setSelectedSpeaker","filteredSpeakerContent","filter","length","some","tag","includes","Fragment","Head","title","page","SpeakerModal","onClose","document","body","style","overflow","Hero","_objectSpread","speakerHeroContent","TabBtn","tab","ScheduleTab","onTabClick","type","prevSelected","s","_toConsumableArray","SpeakerCard"],"sourceRoot":""}